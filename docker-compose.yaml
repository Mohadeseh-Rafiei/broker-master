version: '3.7'



volumes:
  prometheus_data: {}
  grafana_data: {}
  mongodb_data:
  es_data:
  graylog_data:
  graylog_journal:



networks:
  front-tier:
  back-tier:

services:
  broker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: messageBroker
    restart: always

    depends_on:
      - redis
      - prometheus
      - alertmanager
      - graylog
      - grafana
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - 4000:4000
      - 5000:5000
    networks:
      - back-tier


  redis:
    image: redis
    container_name: redis
    hostname: redis
    ports:
      - 8000:6379
    networks:
      - back-tier


  prometheus:
    image: prom/prometheus:v2.1.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      #      - cadvisor:cadvisor
      - alertmanager:alertmanager
    #      - pushgateway:pushgateway
    #    depends_on:
    #      - cadvisor
    #    #      - pushgateway
    networks:
      - back-tier
    restart: always
    #    deploy:
    #      placement:
    #        constraints:
    #          - node.hostname == ${HOSTNAME}


  alertmanager:
    image: prom/alertmanager
    container_name: alartManager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    #    deploy:
    #      placement:
    #        constraints:
    #          - node.hostname == ${HOSTNAME}
    #  cadvisor:
    #    image: gcr.io/cadvisor/cadvisor
    #    container_name: cadvisor
    #    volumes:
    #      - /:/rootfs:ro
    #      - /var/run:/var/run:rw
    #      - /sys:/sys:ro
    #      - /var/lib/docker/:/var/lib/docker:ro
    #    ports:
    #      - 8080:8080
    #    networks:
    #      - back-tier
    #    restart: always
    #    deploy:
    #      mode: global

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always



  mongodb:
    image: "mongo:4.2"
    container_name: graylog-mongodb
    volumes:
      - "mongodb_data:/data/db"
    restart: "always"
    networks:
      - back-tier

  elasticsearch:
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      http.host: "0.0.0.0"
      action.auto_create_index: "false"
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2"
    container_name: graylog-elasticsearch
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - "es_data:/usr/share/elasticsearch/data"
    restart: "always"
    networks:
      - back-tier

  graylog:
    image: "graylog/graylog-enterprise:4.1"
    container_name: graylog
    depends_on:
      - elasticsearch
      - mongodb
    entrypoint: "/usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: ${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}
      GRAYLOG_ROOT_PASSWORD_SHA2: ${GRAYLOG_ROOT_PASSWORD_SHA2:?Please configure GRAYLOG_ROOT_PASSWORD_SHA2 in the .env file}
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
      # To make reporting (headless_shell) work inside a Docker container
      GRAYLOG_REPORT_DISABLE_SANDBOX: "true"
    ports:
      - "5044:5044/tcp"   # Beats
      - "5140:5140/tcp"   # Syslog TCP
      - "5140:5140/udp"   # Syslog UDP
      - "5555:5555/tcp"   # RAW TCP
      - "5555:5555/udp"   # RAW TCP
      - "9000:9000/tcp"   # Server API
      - "12201:12201/tcp" # GELF TCP
      - "12201:12201/udp" # GELF UDP
      #- "10000:10000/tcp" # Custom TCP port
      #- "10000:10000/udp" # Custom UDP port
      - "13301:13301/tcp" # Forwarder data
      - "13302:13302/tcp" # Forwarder config
    volumes:
      - "graylog_data:/usr/share/graylog/data/data"
      - "graylog_journal:/usr/share/graylog/data/journal"
    restart: "always"
    networks:
      - back-tier







